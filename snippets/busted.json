//snippets for lua busted unit test framework
{
    "describe": {
        "body": "describe(\"${1:test suite description}\", function ()\n\t${2:-- do test}\nend)",
        "description": "busted: insert new test suite",
        "prefix": "describe",
        "scope": "source.lua"
    },
    "it": {
        "body": "it(\"${1:test case description}\", function ()\n\t${2:-- do test}\nend)",
        "description": "busted: insert new test case",
        "prefix": "it",
        "scope": "source.lua"
    },
    "test": {
        "body": "test(\"${1:test case description}\", function ()\n\t${2:-- do test}\nend)",
        "description": "busted: inset new test case",
        "prefix": "test",
        "scope": "source.lua"
    },
    "setup": {
        "body": "setup(function ()\n\t${1:-- do test suite setup works here}\nend)",
        "description": "busted: setup the test suite environment",
        "prefix": "setup",
        "scope": "source.lua"
    },
    "teardown": {
        "body": "teardown(function ()\n\t${1:-- do test suite clean works here}\nend)",
        "description": "busted: clean the test suite environment",
        "prefix": "teardown",
        "scope": "source.lua"
    },
    "before_each": {
        "body": "before_each(function ()\n\t${1:-- do before each case run}\nend)",
        "description": "busted: prepare for test case",
        "prefix": "before_each",
        "scope": "source.lua"
    },
    "after_each": {
        "body": "after_each(function ()\n\t${1:-- do after each case run}\nend)",
        "description": "busted: do clean work after test run",
        "prefix": "after_each",
        "scope": "source.lua"
    },
    "stub": {
        "body": "stub(${1:module}, \"${2:function_name}\")",
        "description": "busted: install a new stub for the function in module",
        "prefix": "stub",
        "scope": "source.lua"
    },
    "spy.on": {
        "body": "spy.on(${1:module}, ${2:\"function_name_string\"})",
        "description": "busted: track the function in module",
        "prefix": "spy.on",
        "scope": "source.lua"
    },
    "assert.equal": {
        "body": "assert.equal(${1:expect}, ${2:real})",
        "description": "busted: value or reference equal assertion",
        "prefix": "assert.equal",
        "scope": "source.lua"
    },
    "assert.not.equals": {
        "body": "assert.not.equals(${1:obj-a}, ${2:obj-b})",
        "description": "busted: value or reference not equal assertion",
        "prefix": "assert.not.equals",
        "scope": "source.lua"
    },
    "assert.same": {
        "body": "assert.same(${1:expect}, ${2:real})",
        "description": "busted: deep comparisons assertion",
        "prefix": "assert.same",
        "scope": "source.lua"
    },
    "assert.unique": {
        "body": "assert.unique(${1:data table})",
        "description": "busted: table items unique check",
        "prefix": "assert.unique",
        "scope": "source.lua"
    },
    "stub.on_call_with": {
        "body": "stub(${1:the stub}).on_call_with(${2:params})",
        "description": "busted: stub with condition, example:\nstub(devm_base, \"GetDeviceCfg\").on_call_with(devId).returns(OK, deviceCfg)\n",
        "prefix": "stub.on_call_with",
        "scope": "source.lua"
    },
    "stub.revert": {
        "body": "stub(${1:the stub}).revert()",
        "description": "busted: reverts the stub (uninstall the stub)",
        "prefix": "stub.revert",
        "scope": "source.lua"
    },
    "assert.stub.was.called": {
        "body": "assert.stub(${1:the stub})was.called(${2:called times})",
        "description": "busted: check a stub called times, example:\nstub(devm_base, \"GetDeviceCfg\")\ndevm_base.GetDeviceCfg()\nassert.stub(devm_base.GetDeviceCfg).was.called(1)\n",
        "prefix": "assert.stub.was.called",
        "scope": "source.lua"
    },
    "assert.stub.was.called_with": {
        "body": "assert.stub(${1:the stub}).was.called_with(${2:params})",
        "description": "busted: check a stub called with given params",
        "prefix": "assert.stub.was.called_with",
        "scope": "source.lua"
    },
    "assert.spy.was.called": {
        "body": "assert.spy(${1:the spy})was.called(${2:called times})",
        "description": "busted: check a spy called times, example:\nstub(devm_base, \"GetDeviceCfg\")\ndevm_base.GetDeviceCfg()\nassert.stub(devm_base.GetDeviceCfg).was.called(1)\n",
        "prefix": "assert.spy.was.called",
        "scope": "source.lua"
    },
    "assert.spy.was.called_with": {
        "body": "assert.spy(${1:the spy}).was.called_with(${2:params})",
        "description": "busted: check a spy called with given params",
        "prefix": "assert.spy.was.called_with",
        "scope": "source.lua"
    },
    "randomize": {
        "body": "randomize()",
        "description": "busted: randomize the tests in a test suite, can be disable by randomize(false)",
        "prefix": "randomize",
        "scope": "source.lua"
    },
    "finally": {
        "body": "finally(function()\n\t--do finally things\nend)",
        "description": "busted: randomize the tests in a test suite, can be disable by randomize(false)",
        "prefix": "finally",
        "scope": "source.lua"
    },
    "assert.is.truthy": {
        "body": "assert.is.truthy(${1:value})",
        "description": "busted: check value is not nil or false",
        "prefix": "assert.is.truthy",
        "scope": "source.lua"
    },
    "assert.is.falsy": {
        "body": "assert.is.falsy(${1:value})",
        "description": "busted: check value is nil or false",
        "prefix": "assert.is.falsy",
        "scope": "source.lua"
    },
    "match.is_string": {
        "body": "match.is_string()",
        "description": "busted: used to check string type, use with was_called_with()",
        "prefix": "match.is_string",
        "scope": "source.lua"
    },
    "match.is_number": {
        "body": "match.is_number()",
        "description": "busted: used to check number type, use with was_called_with()",
        "prefix": "match.is_number",
        "scope": "source.lua"
    },
    "match.is_boolean": {
        "body": "match.is_boolean()",
        "description": "busted: used to check boolean type, use with was_called_with()",
        "prefix": "match.is_boolean",
        "scope": "source.lua"
    },
    "match.is_table": {
        "body": "match.is_table()",
        "description": "busted: used to check table type, use with was_called_with()",
        "prefix": "match.is_table",
        "scope": "source.lua"
    },
    "match.is_truthy": {
        "body": "match.is_truthy()",
        "description": "busted: used to check boolean type, use with was_called_with()",
        "prefix": "match.is_truthy",
        "scope": "source.lua"
    },
    "match.is_not_nil": {
        "body": "match.is_not_nil(${1:matchers...})",
        "description": "busted: used to compose matchers, use with was_called_with()",
        "prefix": "match.is_not_nil",
        "scope": "source.lua"
    },
    "match.is_all_of": {
        "body": "match.is_all_of(${1:matchers...})",
        "description": "busted: used to compose matchers, use with was_called_with()",
        "prefix": "match.is_all_of",
        "scope": "source.lua"
    },
    "match.is_any_of": {
        "body": "match.is_any_of(${1:matchers...})",
        "description": "busted: used to compose matchers, use with was_called_with()",
        "prefix": "match.is_any_of",
        "scope": "source.lua"
    }
}