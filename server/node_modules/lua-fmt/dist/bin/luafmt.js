#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pkg = require('../../package.json');
const program = require("commander");
const getStdin = require("get-stdin");
const fs_1 = require("fs");
const index_1 = require("../src/index");
program
    .version(pkg.version)
    .usage('[options] [file]')
    .option('--stdin', 'Read code from stdin');
program.parse(process.argv);
function printError(filename, err) {
    if (err instanceof SyntaxError) {
        console.error(`Failed to parse ${filename}:`, err);
        process.exit(2);
    }
    else {
        console.error(`Failed to format ${filename}:`, err);
        process.exit(3);
    }
}
if (program.stdin) {
    getStdin().then(input => {
        process.stdout.write(index_1.formatText(input));
    }).catch((err) => {
        printError('<stdin>', err);
    });
}
else {
    if (program.args.length === 0) {
        console.error('Expected <file.lua>');
        program.outputHelp();
        process.exit(1);
    }
    const filename = program.args[0];
    let input = '';
    try {
        input = fs_1.readFileSync(filename).toString();
    }
    catch (err) {
        printError(filename, err);
    }
    try {
        const formatted = index_1.formatText(input);
        process.stdout.write(formatted);
    }
    catch (err) {
        printError(filename, err);
    }
}
//# sourceMappingURL=luafmt.js.map